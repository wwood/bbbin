#!/usr/bin/env python3

###############################################################################
#
#    Copyright (C) 2021 Ben Woodcroft
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

__author__ = "Ben Woodcroft"
__copyright__ = "Copyright 2021"
__credits__ = ["Ben Woodcroft"]
__license__ = "GPL3"
__maintainer__ = "Ben Woodcroft"
__email__ = "benjwoodcroft near gmail.com"
__status__ = "Development"

import argparse
import logging
import sys
import os
import json
import extern

sys.path = [os.path.join(os.path.dirname(os.path.realpath(__file__)),'..')] + sys.path

if __name__ == '__main__':
    parent_parser = argparse.ArgumentParser(add_help=False)
    parent_parser.add_argument('--debug', help='output debug information', action="store_true")
    #parent_parser.add_argument('--version', help='output version information and quit',  action='version', version=repeatm.__version__)
    parent_parser.add_argument('--quiet', help='only output errors', action="store_true")

    parent_parser.add_argument('--namespace','-n',default='argo')

    args = parent_parser.parse_args()

    # Setup logging
    if args.debug:
        loglevel = logging.DEBUG
    elif args.quiet:
        loglevel = logging.ERROR
    else:
        loglevel = logging.INFO
    logging.basicConfig(level=loglevel, format='%(asctime)s %(levelname)s: %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')

    json_list = extern.run(f'argo list -n {args.namespace} -o json')
    j = json.loads(json_list)
    # with open('/tmp/argo.json') as f:
    #     j = json.load(f)

    status = {}
    for i in j:
        nodes = list(sorted(i['status']['nodes'].values(), key=lambda x: x['displayName']))
        
        if len(nodes) == 2:
            current_status = nodes[-1]['phase']
        elif len(nodes) < 2:
            raise Exception("Unexpected number of nodes in json object")
        else:
            failure_modes = [n['phase'] for n in nodes[1:-1]]
            current_state = nodes[-1]['phase']
            current_status = f"Retry after {','.join(sorted(failure_modes))}, now {current_state}"

        if current_status not in status:
            status[current_status] = 0
        status[current_status] += 1
    
    for s in list(sorted(status.keys())):
        print(f'{s}\t{status[s]}')